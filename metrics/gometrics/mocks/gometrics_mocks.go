// Code generated by MockGen. DO NOT EDIT.
// Source: gometrics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	go_metrics "github.com/rcrowley/go-metrics"
)

// MockIGoMetrics is a mock of IGoMetrics interface.
type MockIGoMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockIGoMetricsMockRecorder
}

// MockIGoMetricsMockRecorder is the mock recorder for MockIGoMetrics.
type MockIGoMetricsMockRecorder struct {
	mock *MockIGoMetrics
}

// NewMockIGoMetrics creates a new mock instance.
func NewMockIGoMetrics(ctrl *gomock.Controller) *MockIGoMetrics {
	mock := &MockIGoMetrics{ctrl: ctrl}
	mock.recorder = &MockIGoMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGoMetrics) EXPECT() *MockIGoMetricsMockRecorder {
	return m.recorder
}

// CreateCounter mocks base method.
func (m *MockIGoMetrics) CreateCounter(name string) *go_metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCounter", name)
	ret0, _ := ret[0].(*go_metrics.Counter)
	return ret0
}

// CreateCounter indicates an expected call of CreateCounter.
func (mr *MockIGoMetricsMockRecorder) CreateCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCounter", reflect.TypeOf((*MockIGoMetrics)(nil).CreateCounter), name)
}

// CreateMetrics mocks base method.
func (m *MockIGoMetrics) CreateMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateMetrics")
}

// CreateMetrics indicates an expected call of CreateMetrics.
func (mr *MockIGoMetricsMockRecorder) CreateMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetrics", reflect.TypeOf((*MockIGoMetrics)(nil).CreateMetrics))
}

// CreateTimer mocks base method.
func (m *MockIGoMetrics) CreateTimer(name string) *go_metrics.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimer", name)
	ret0, _ := ret[0].(*go_metrics.Timer)
	return ret0
}

// CreateTimer indicates an expected call of CreateTimer.
func (mr *MockIGoMetricsMockRecorder) CreateTimer(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimer", reflect.TypeOf((*MockIGoMetrics)(nil).CreateTimer), name)
}

// IncDBGetTimer mocks base method.
func (m *MockIGoMetrics) IncDBGetTimer(start time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncDBGetTimer", start)
}

// IncDBGetTimer indicates an expected call of IncDBGetTimer.
func (mr *MockIGoMetricsMockRecorder) IncDBGetTimer(start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncDBGetTimer", reflect.TypeOf((*MockIGoMetrics)(nil).IncDBGetTimer), start)
}

// IncDBPutTimer mocks base method.
func (m *MockIGoMetrics) IncDBPutTimer(start time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncDBPutTimer", start)
}

// IncDBPutTimer indicates an expected call of IncDBPutTimer.
func (mr *MockIGoMetricsMockRecorder) IncDBPutTimer(start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncDBPutTimer", reflect.TypeOf((*MockIGoMetrics)(nil).IncDBPutTimer), start)
}

// IncHTTPStatusCounters mocks base method.
func (m *MockIGoMetrics) IncHTTPStatusCounters(ctx context.Context, httpStatusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncHTTPStatusCounters", ctx, httpStatusCode)
}

// IncHTTPStatusCounters indicates an expected call of IncHTTPStatusCounters.
func (mr *MockIGoMetricsMockRecorder) IncHTTPStatusCounters(ctx, httpStatusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncHTTPStatusCounters", reflect.TypeOf((*MockIGoMetrics)(nil).IncHTTPStatusCounters), ctx, httpStatusCode)
}

// IncLivenessRequestTimer mocks base method.
func (m *MockIGoMetrics) IncLivenessRequestTimer(start time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncLivenessRequestTimer", start)
}

// IncLivenessRequestTimer indicates an expected call of IncLivenessRequestTimer.
func (mr *MockIGoMetricsMockRecorder) IncLivenessRequestTimer(start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncLivenessRequestTimer", reflect.TypeOf((*MockIGoMetrics)(nil).IncLivenessRequestTimer), start)
}

// IncReadinessRequestTimer mocks base method.
func (m *MockIGoMetrics) IncReadinessRequestTimer(start time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncReadinessRequestTimer", start)
}

// IncReadinessRequestTimer indicates an expected call of IncReadinessRequestTimer.
func (mr *MockIGoMetricsMockRecorder) IncReadinessRequestTimer(start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncReadinessRequestTimer", reflect.TypeOf((*MockIGoMetrics)(nil).IncReadinessRequestTimer), start)
}

// IncServiceRequestTimer mocks base method.
func (m *MockIGoMetrics) IncServiceRequestTimer(start time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncServiceRequestTimer", start)
}

// IncServiceRequestTimer indicates an expected call of IncServiceRequestTimer.
func (mr *MockIGoMetricsMockRecorder) IncServiceRequestTimer(start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncServiceRequestTimer", reflect.TypeOf((*MockIGoMetrics)(nil).IncServiceRequestTimer), start)
}

// SetMetricsRegistry mocks base method.
func (m *MockIGoMetrics) SetMetricsRegistry(registry go_metrics.Registry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetricsRegistry", registry)
}

// SetMetricsRegistry indicates an expected call of SetMetricsRegistry.
func (mr *MockIGoMetricsMockRecorder) SetMetricsRegistry(registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetricsRegistry", reflect.TypeOf((*MockIGoMetrics)(nil).SetMetricsRegistry), registry)
}
